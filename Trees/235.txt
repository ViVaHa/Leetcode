# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        lists=[]
        boolean=self.findLCA(root,p,q,lists)
        return lists[0]
    
    def findLCA(self,root,p,q,lists):
        selfTrue=False
        if root is None:
            return False
        if root.val==p.val or root.val==q.val:
            selfTrue=True
        leftTrue=self.findLCA(root.left,p,q,lists)
        rightTrue=self.findLCA(root.right,p,q,lists)
        if leftTrue and rightTrue:
            lists.append(root)
        elif leftTrue:
            if leftTrue and selfTrue:
                lists.append(root)
        elif rightTrue:
            if rightTrue and selfTrue:
                lists.append(root)    
        return leftTrue or rightTrue or selfTrue
