# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def averageOfLevels(self, root):
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        
        return self.findAverage(root)
    
    def findAverage(self,root):
        ans=[]
        stack1=[]
        stack2=[]
        node = TreeNode(0)
        stack1.append(root)
        while len(stack1)>0 or len(stack2)>0:
            count=0
            sumStack=0
            if len(stack2)==0:
                while len(stack1)>0:
                    count=count+1
                    node=stack1.pop()
                    if node.left is not None:
                        stack2.append(node.left)
                    if node.right is not None:
                        stack2.append(node.right)
                    sumStack+=node.val
                ans.append(sumStack/count)
            elif len(stack1)==0:
                while len(stack2)>0:
                    count=count+1
                    node=stack2.pop()
                    if node.left is not None:
                        stack1.append(node.left)
                    if node.right is not None:
                        stack1.append(node.right)
                    sumStack+=node.val
                ans.append(sumStack/count)
                
        return ans
