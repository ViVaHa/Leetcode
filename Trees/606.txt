class Solution:
    def tree2str(self, t):
        """
        :type t: TreeNode
        :rtype: str
        """
        if t is None:
            return ""
        ret =""
        ret=self.findString(t,True)
        return ret
    
    def isLeaf(self,t):
        if t is None:
            return False
        if t.left is None and t.right is None:
            return True
        return False
    def hasOnlyRightChild(self,t):
        if t.left is None and t.right is not None:
            return True
        return False
    
    def findString(self,t,isLeft):
        if t is None:
            return ""
        if self.isLeaf(t):
            return str(t.val)
        retVal=str(t.val)
        leftPart=""
        rightPart=""
        if t.left is not None:
            leftPart="(" + self.findString(t.left,True) + ")"
        if self.hasOnlyRightChild(t):
            leftPart="()"
        if t.right is not None:
            rightPart="(" + self.findString(t.right,False) + ")"
        return retVal+leftPart+rightPart
